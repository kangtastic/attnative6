#!/bin/sh
# File: install-attnative6
# Description: Script to generate and install a configuration file for the
#    dibbler DHCPv6 client and a helper script, intended for use on routers
#    connected to u-Verse Fiber with the Residential Gateway bypassed.
#    Results in native IPv6 with Prefix Delegation.
# Requires: dibbler-client, template files in current directory
# Template file names: client.conf.template, pdsplit.sh.template
err() { echo "$*" >&2; }
die() { err "EXIT WITH ERROR: $*"; exit 1; }
# this awk one-liner should be fully portable
ascii2hex() { echo "$*" | awk 'BEGIN{for(n=0;n<256;n++)ord[sprintf("%c",n)]=n}{len=split($0,c,"");for(i=1;i<=len;i++)printf("%X",ord[c[i]])}'; }

confirm() {
  read -p "	Enter 'yes' exactly to confirm: " ans
  [ "$ans" = "yes" ] && return 0 || return 1
}

conftmpl=client.conf.template
hlptmpl=pdsplit.sh.template

[ -x "$(which dibbler-client)" ] || die "dibbler-client not installed"
[ "$(whoami)" = "root" ] || err "WARNING: NOT RUNNING AS ROOT"
for f in $conftmpl $hlptmpl; do  [ -f $f ] || die "$f not found in current directory"; done

cat << EOF

This installer generates and installs configuration files for the dibbler DHCPv6
client that configure it to request a global unicast address ("public", semi-
permanent IPv6 address) and a Prefix Delegation (PD) very similarly to an Arris
Motorola NVG599.

This allows native dual-stack IPv6 connectivity on a router connected to a
u-Verse Fiber ONT, either directly or via a managed switch, bypassing an RG.

See https://is.gd/wokixe for more details on the bypass process.

See https://github.com/kangtastic/attnative6 for more details on this installer.

NOTE: This script is best run BEFORE STARTING dibbler-client FOR THE FIRST TIME.
dibbler seems to ignore certain changes to its configuration otherwise.

(If you are just trying to generate a new helper script, disregard this note.)

Step 1) Interfaces
Enter the names of the WAN-facing and LAN-facing interfaces on this system.
If bypassing using an EAP proxy, the WAN-facing interface is probably named
something like "eth0.0".

EOF
while read -p "	WAN interface name: " wan; do [ -n "$wan" ] && break; done
while read -p "	LAN interface name: " lan; do [ -n "$lan" ] && break; done

cat << EOF

Step 2) RG Information
Enter your Residential Gateway's manufacturer and serial number.
If the serial number contains any capital/small letters, enter them exactly.
From this we can reconstruct the DUID-EN it sends during DHCPv6 requests.

(If you are just trying to generate a new helper script, it doesn't matter what
you enter here.)

EOF
while read -p "	Manufacturer [1=Pace, 2=Motorola]: " mfg; do
  ([ "$mfg" = "1" ] || [ "$mfg" = "2" ]) && break
done
while read -p "	Serial number: " serial; do [ -n "$serial" ] && break; done

cat << EOF

Step 3) Paths
By default, dibbler expects its configuration files to be in "/etc/dibbler",
and writes its logs to "/var/log/dibbler".

We will generate a configuration file for dibbler named "client.conf" and a
helper script named "pdsplit.sh". These will go in "/etc/dibbler". The helper
script will also save its own logs to "/var/log/dibbler".

If you would like to change where the generated files will go, or where the
helper script will save its logs, you can do so now.

Just press ENTER to accept the defaults.

EOF
read -p "	dibbler config directory [default=/etc/dibbler]: " confpath
read -p "	Helper script directory [default=/etc/dibbler]: " hlppath
read -p "	Helper script log directory [default=/var/log/dibbler]: " logpath
[ -z "$confpath" ] && confpath=/etc/dibbler
[ -z "$hlppath" ] && hlppath=/etc/dibbler
[ -z "$logpath" ] && logpath=/var/log/dibbler

cat << EOF

Step 4) WAN interface PD address assignment
Many have noticed that the address that AT&T gives you on the WAN interface
doesn't actually give you IPv6, but addresses in the Prefix Delegation work
fine.

It turns out that AT&T hasn't turned on routing on their end for the entire
range of IPv6 addresses from which they are handing out IPv6 assignments to
router WAN interfaces! They could at some future point, but haven't yet.

The logical workaround involves binding a single address from the same subnet
being used on the LAN to the WAN interface.

Insert this workaround into the helper script?

EOF
bindwan=no; confirm && bindwan=yes

cat << EOF

Step 5) Confirm
Please confirm that the information below is correct, or the script will quit.

EOF
echo "	WAN interface: $wan"
echo "	LAN interface: $lan"
echo
echo "	RG manufacturer: $([ $mfg = 1 ] && echo Pace || echo Motorola)"
echo "	RG serial number: $serial"
echo
echo "	Additional address on WAN interface from PD: $bindwan"
echo
echo "	dibbler configuration file directory: $confpath"
echo "	Helper script directory: $hlppath"
echo "	Helper script log directory: $logpath"
echo
confirm || die "User canceled"

conf=$(echo $conftmpl | sed 's|.template||')
hlp=$(echo $hlptmpl | sed 's|.template||')

cat << EOF

Step 6) Generate and install
We will try to generate a new configuration for dibbler-client, close any
running instances, delete the client's current lease database, and install the
generated configuration file and helper script.

(If you are just trying to generate a new helper script, don't delete the lease
database and don't install client.conf.)

EOF
[ "$mfg" = "1" ] && mfg="00D09E" || mfg="001E46"
duiden=$(ascii2hex "$mfg-$serial"); duiden="0x$duiden"

for f in $conftmpl $hlptmpl; do
  of=$(echo $f | sed 's|.template||')
  cp $f $of &&
  sed -s "s|__INSTALLERPATH__|$(readlink -f $0)|" -i.bak $of &&
  sed -e "s|__DATE__|$(date -R)|" -i.bak $of &&
  sed -e "s|__WAN__|$wan|" -i.bak $of &&
  sed -e "s|__LAN__|$lan|" -i.bak $of &&
  sed -e "s|__DUIDEN__|$duiden|" -i.bak $of &&
  sed -e "s|__CONFPATH__|$confpath|" -i.bak $of &&
  sed -e "s|__HLPPATH__|$hlppath|" -i.bak $of &&
  sed -e "s|__LOGPATH__|$logpath|" -i.bak $of &&
  sed -e "s|__BINDWAN__|$bindwan|" -i.bak $of &&
  rm $of.bak &&
  echo "	$of generated." || die "	$of could not be generated."
done
echo

if [ -n "$(pgrep dibbler-client)" ]; then
  echo "dibbler-client is running, killing it now."
  echo "This should also release the DHCPv6 assignments it has, if any."
  killall dibbler-client || err "Could not kill dibbler-client!"
  echo
fi
if [ -f /var/lib/dibbler/client-duid ]; then
cat << EOF
Clear dibbler-client's DHCPv6 lease database? It seems you've run it already.
This is probably necessary, unless you already have IPv6 (possibly through this
installer script).

Technical reason: If dibbler-client has already generated a DUID-LLT from your
MAC address, it stores it in the lease database, even without any leases, and
ignores a DUID-EN configured in client.conf.

EOF
  if confirm; then
    rm -f /var/lib/dibbler/client* || err "Failed, are you root?"
  fi
  echo
fi

echo "Install $conf (the config file) into $confpath?"
echo
if confirm; then
  mkdir -p "$confpath" && mv $conf "$confpath" || err "Failed, are you root?"
fi
echo

chmod +x $hlp
echo "Install $hlp (the helper script) into $hlppath?"
echo
if confirm; then
  mkdir -p "$ hlppath" && mv $hlp "$hlppath" || err "Failed, are you root?"
fi

cat << EOF

Step 7) Finished.

Run 'systemctl restart dibbler-client' as root to start or restart the client.

EOF
