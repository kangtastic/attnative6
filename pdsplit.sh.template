#!/bin/sh
# File: __HLPPATH__/pdsplit.sh
# Description: Helper for dibbler-client to split a delegated /64 or shorter
#     by binding the first /64 within to a LAN interface. Also tries to set a
#     default IPv6 route.
# Generated on:  __DATE__
#
# This script should be called by dibbler-client after it has received an IA_NA
# and a delegated prefix from a DHCPv6 server. It relies on environment
# variables available when it is called this way and will not work otherwise.
#
# IPv6 connectivity for LAN clients requires, at minimum, sending Router
# Advertisements (with radvd/dnsmasq) to the LAN interface and enabling IPv6
# forwarding in the kernel. An ip6tables firewall is also a very good idea.
#
# Recommended: rdisc6 (ICMPv6 Router Discovery tool, Debian package name ndisc6)

# LAN interface to which the PD should be bound
LAN=__LAN__

script=$(basename $0)
logpath="__LOGPATH__"; mkdir -p "$logpath"
logfile="$logpath/$(basename $script .sh).log"
reason=manual; [ -n "$1" ] && reason=$1

log() { echo "$(date '+%Y.%m.%d %T') $script $*" >> "$logfile"; }
die() {	log "EXIT WITH ERROR: $*"; exit 1; }

log "started, reason: $reason"

[ "$reason" = "manual" ] && die "should only be called by dibbler-client"
[ $PREFIX1LEN -gt 64 ] && die "received prefix longer than a /64"
[ -x "$(which ip)" ] || die "ip utility from iproute2 not found"

# If $PREFIX1/64 not bound to LAN, purge all other global IPv6 addrs and add it
replace_global_addr() {
	if ip -6 -br addr show dev $LAN | grep -q $PREFIX1/64; then
		log "LAN interface $LAN already bound to $PREFIX1/64, moving on"
	else
		log "binding $PREFIX1/64 to LAN interface $LAN"
		ip -6 addr flush dev $LAN scope global &&
		ip -6 addr add $PREFIX1/64 dev $LAN || die "failed"
	fi
}
fixup_default_route() {
	cur_gateway=$(ip -6 route show default | awk '{print $3}')
	adv_gateway=$(rdisc6 -n $IFACE | tail -1 | awk '{print $2}')
	# Running rdisc6 should just refresh the default route, but may
	# be adding a new one entirely. If it's the latter, purge & rerun
	if [ "$cur_gateway" = "$adv_gateway" ]; then
		log "no problem with default route, moving on"
	else
		log "purging and readding default route"
		ip -6 route flush default &&
		rdisc6 -n $IFACE 2>&1 1>/dev/null || die "failed"
	fi
	log "default IPv6 route is via $adv_gateway on dev $IFACE"
}
skip_fixup() {
	cur_gateway=$(ip -6 route show default | awk '{print $3}')
	log "rdisc6 not installed, will not send Router Solicitation"
	log "IPv6 connectivity to WAN may fail or be delayed"
	[ -z "$cur_gateway" ] && log "no default IPv6 route yet" ||
		log "default IPv6 route is via $cur_gateway"
}

case "$reason" in
	add|update)
		replace_global_addr

		# Listen for RAs on WAN, even if IPv6 forwarding is enabled
		log "accepting Router Advertisements on $IFACE"
		echo 2 > /proc/sys/net/ipv6/conf/$IFACE/accept_ra

		[ -x "$(which rdisc6)" ] && fixup_default_route || skip_fixup
	;;
	delete)
		log "removing all global IPv6 addresses on LAN interface $LAN"
		ip -6 addr flush dev $LAN scope global || die "failed"
		log "removing the default IPv6 route"
		ip -6 route flush default || die "failed"
	;;
esac

log "finished"
